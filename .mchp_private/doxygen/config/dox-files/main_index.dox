/*----------------------------------------------------------------------------*/
/* APPLICATION LAYER */
/*----------------------------------------------------------------------------*/
/**
@defgroup    apps-layer Application Layer
@brief       
@details
*/

/**
@defgroup   pbv-layer Power Board Visualizer
@ingroup    apps-layer
@brief      Driver for Power Board Visualizer
@details    
*/
	/**
	@defgroup   PBV_CAN CAN Communication
	@ingroup    pbv-layer
	@brief      This abstracts the MCC driver api.
	@details    This layer abstracts the MCC driver api to have the same interface as the UART.
	*/
	
	/**
	@defgroup   PBV_UART UART Communication
	@ingroup    pbv-layer
	@brief      This is where the framing/deframing and transmission happens for UART frames.
	@details    This is where the framing/deframing and transmission happens for UART frames. The fundamental difference between this and CAN-FD frames is that CAN-FD defines a strategy for framing and deframing data, and PBV follows that strategy. UART is a point to point byte by byte transfer of data. 
	To build a frame on top of it, another layer is needed where the data is framed/deframed and trasnmitted. It defines an additional statemachine
	*/
	
	/**
	@defgroup   APP_PBV_INTERFACE PBV Interface
	@ingroup    pbv-layer
	@brief      These implement the PBV state machine of RX and TX, as well as link data that is received by peripherals to application.
	@details    These implement the PBV state machine of RX and TX, as well as link data that is received by peripherals to application.
	*/
	
	/**
	@defgroup   app-pbv-config User Configuration
	@ingroup    pbv-layer
	@brief      This provides a mechanism to abstract away the underlying physical layer by using function pointers, that point to different layers depending upon which layer is selected.
	@details    This provides a mechanism to abstract away the underlying physical layer by using function pointers, that point to different layers depending upon which layer is selected.
	*/

	/**
	@defgroup   app-pbv-dab-map PBV Data DAB App
	@ingroup    pbv-layer
	@brief      This is the main application file.
	@details    This is the main application file. Here there are tasks that run at different frequencies checking for any received messages and triggering sending of messages.
	*/


/*----------------------------------------------------------------------------*/
/* CONFIGURATION LAYER */
/*----------------------------------------------------------------------------*/
/**
@defgroup	config-layer Configuration Layer
@brief		Allow user to quickly change fundamental system parameters, hardware changes and 
			even migrating the firmware across different designs wiht minimal modification 
			in the actual source code.

@details The main purpose of a configuration layer is to provide one central point 
			in the firmware architecture where hardware dependencies can be specified, 
			signal scalings can be defined and specific chip resources can be assigned to support/
			connect generic software functions to the hardware. 

			This central definitions allow fast modifications and optimizations but also support 
			fast code migration between different hardware platforms. Thus, fast adaptation of new 
			hardware can be achieved by modifying this set of centralized definitions.			
*/

/*----------------------------------------------------------------------------*/
/* DEVICE LAYER */
/*----------------------------------------------------------------------------*/
/**
@defgroup    dev-layer Device Layer
@brief       Contains all the application tasks that will be executed
@details

  The device layer covers all user tasks executed by the task scheduler. Each task is an independent entity 
  called on its respective timing defined by the user. Tasks are proprietary user code modules 
  representing specific functions of the application or end-product. <br>
*/

	/*----------------------------------------------------------------------------*/
	/* Power Control */
	/*----------------------------------------------------------------------------*/
	/**
	@defgroup	dev-layer-pcontrol Power Control
	@ingroup	dev-layer
	@brief		The Power Control layer contains the state machine managing the power converter.
	@details	Power control layer provides a wide function in power supply applications. 
	 It has something to do with the control, regulation and monitoring of the power supply. 
	 Moreover, it sets the peripheral configurations needed for a particular power supply topology 
	 as required by the application, as well as sets parameters and performs operations for digital 
	 power control. 
	*/

		/**
		@defgroup   dev-pwrctrl Power Control Configuration
		@ingroup    dev-layer-pcontrol
		@brief      Contains Power Control Configuration 
		@details    This document includes the power control initialization and execution functions.
		*/

		/**
		@defgroup   dev-pwrctrl-isr Interrupt Routine and Functions
		@ingroup    dev-layer-pcontrol
		@brief      Contains the interrupt routine and other functions called in the interrupt
		@details    This document includes the interrupt function in power control.
		*/

		/**
		@defgroup   dev-pwrctrl-pwm PWM Configuration
		@ingroup    dev-layer-pcontrol
		@brief      Contains functions related to PWM properties
		@details    This document includes the power control PWM distribution and other PWM functionalities 
		 relevant to the application.
		*/
		
		/**
		@defgroup   dev-pwrctrl-sm State Machine
		@ingroup    dev-layer-pcontrol
		@brief      Contains the state machine of the power control 
		@details    This document covers the state machine execution.
		*/
		
		/**
		@defgroup   dev-pwrctrl-dcdt Control Loop Configuration
		@ingroup    dev-layer-pcontrol
		@brief      Contains the control loop configuration and initialization functions. 
		@details    This document covers the functions that initialize the control loop using DCDT tool. 
		*/

		/**
		@defgroup   dev-pwrctrl-comm Power Control Communication Interface
		@ingroup    dev-layer-pcontrol
		@brief      Contains functions use to interface to Graphical User Interface or Power Board Visualizer 
		@details    This document covers the functions that sets or gets the power control properties relevant 
		 to the Power Board Visualizer.
		*/

		/**
		@defgroup   dev-pwrctrl-utils Useful Functions
		@ingroup    dev-layer-pcontrol
		@brief      Contains generic functions that is usable to the application
		@details    This document covers some generic power control functions that the user can utilize while developing the application code.
		*/
    	
		/**
		@defgroup   dev-pwrctrl-data-types Power Control Data Types
		@ingroup    dev-layer-pcontrol
		@brief      Contains the collection of power control data types
		@details    This document covers all the data types used in power control application.
		*/


	/*----------------------------------------------------------------------------*/
	/* Fault Monitor */
	/*----------------------------------------------------------------------------*/
	/**
	@defgroup 	dev-layer-fault Fault Monitor
	@ingroup 	dev-layer
	@brief 		The Fault Handler is an independent firmware task which is used to define certain so-called Fault Objects
	@details    Fault monitor is one of the vital components in creating different power supply applications. 
	 It is responsible for the protection of power supply including the monitoring and handling of faults that 
	 may be encountered while power supply is in operation. It is implemented as high-priority task included 
	 in the real-time operating system. Thresholds are being set for voltage, current, and temperature level 
	 that are being monitored if user-defined fault objects violate the minimum and maximum input and output 
	 voltage and current, and maximum temperature level allowed. Once the fault monitor objects detect a fault, 
	 this will trigger the fault responses and respond immediately.
	*/
	
		/**
		@defgroup   dev-fault Fault Configuration
		@ingroup    dev-layer-fault
		@brief      Contains functions that initialize, execute and handles the power supply fault.
		@details    This document covers the fault initialization, the fault execute function, and the fault handler. 
		*/

		/**
		@defgroup   dev-fault-common Generic Fault Driver
		@ingroup    dev-layer-fault
		@brief      Contains generic fault functions
		@details    This document contains fault functions that handles different fault conditions and threshold.
		*/
	
	/*----------------------------------------------------------------------------*/
	/* CURRENT SENSOR */
	/*----------------------------------------------------------------------------*/
	/**
	@defgroup	dev-current-sensor Current Sensor Calibration
	@ingroup	dev-layer
	@brief		The Current Sensor Calibration device layer is a proprietary user code utilized for configuring the sensor properties.
	*/
	
	/*----------------------------------------------------------------------------*/
	/* FAN */
	/*----------------------------------------------------------------------------*/
	/**
	@defgroup	dev-fan Fan Control
	@ingroup	dev-layer
	@brief		The Fan control device layer is a proprietary user code utilized for configuring the fan control properties.
	*/

	/*----------------------------------------------------------------------------*/
	/* LED */
	/*----------------------------------------------------------------------------*/
	/**
	@defgroup	dev-led LED Display
	@ingroup	dev-layer
	@brief		The LED device layer is the proprietary user code used to configure 
				and drive the on-board debugging LED.
	*/
	
	/*----------------------------------------------------------------------------*/
	/* TEMPERATURE */
	/*----------------------------------------------------------------------------*/
	/**
	@defgroup	dev-temp Temperature Detection
	@ingroup	dev-layer
	@brief		The Temperature device layer is the proprietary user code used to configure 
				and detect the board temperature.
	*/

/*----------------------------------------------------------------------------*/
/* DRIVER LAYER */
/*----------------------------------------------------------------------------*/
/**
@defgroup	driver-layer Driver Layer
@brief		Contain functions and properties of the Driver layer
@details 	The driver layer includes peripheral drivers managed by the MPLABX MCC Melody tool. 
			It is essential to initialize certain peripheral functionalities to enable specific 
			features required for the application.
*/

/*----------------------------------------------------------------------------*/
/* RTOS LAYER */
/*----------------------------------------------------------------------------*/
/**
@defgroup	os-layer Operating System Layer
@brief		Contain functions and properties of the Operating System 
*/

/*----------------------------------------------------------------------------*/
/* MCC LAYER */
/*----------------------------------------------------------------------------*/
/**
@defgroup    mcc-layer MPLABX Configurator Driver Layer
@brief       Contains all the module generated by MCC for this application
@details	
*/


	